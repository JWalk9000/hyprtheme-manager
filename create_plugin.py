#!/usr/bin/env python3
"""
Plugin Template Generator
Creates a new theme plugin template
"""

import os
import sys
from pathlib import Path

PLUGIN_TEMPLATE = '''"""
{app_title} Theme Plugin
Handles theming for {app_description}
"""

import os
import shutil
import subprocess
from typing import Dict, Any, List
from plugin_manager import ThemePlugin

class {class_name}Plugin(ThemePlugin):
    
    @property
    def name(self) -> str:
        return "{app_name}"
    
    @property
    def display_name(self) -> str:
        return "{app_title}"
    
    @property
    def description(self) -> str:
        return "{app_description}"
    
    @property
    def config_path(self) -> str:
        return os.path.expanduser("{config_path}")
    
    @property
    def template_name(self) -> str:
        return "{app_name}"
    
    @property
    def dependencies(self) -> List[str]:
        return ["{app_name}"]
    
    def is_available(self) -> bool:
        """Check if {app_title} is installed"""
        return shutil.which("{executable_name}") is not None
    
    def apply_theme(self, colors: Dict[str, Any]) -> bool:
        """Apply theme to {app_title}"""
        try:
            from template_manager import read_template, render_template, write_config
            
            template_dir = os.path.join(os.path.dirname(__file__), '..', 'config', 'templates')
            
            template = read_template(self.template_name, template_dir)
            if not template:
                print(f"No template found for {{self.display_name}}")
                return False
            
            rendered = render_template(template, colors)
            write_config(self.config_path, rendered)
            
            # Custom reload logic here
            self._reload_{app_name}()
            
            return True
            
        except Exception as e:
            print(f"Failed to apply {app_title} theme: {{e}}")
            return False
    
    def backup_config(self, backup_dir: str) -> bool:
        """Backup current {app_title} config"""
        try:
            if os.path.exists(self.config_path):
                backup_path = os.path.join(backup_dir, f"{app_name}-config.backup")
                os.makedirs(backup_dir, exist_ok=True)
                shutil.copy2(self.config_path, backup_path)
                return True
            return False
        except Exception as e:
            print(f"Failed to backup {app_title} config: {{e}}")
            return False
    
    def restore_config(self, backup_dir: str) -> bool:
        """Restore {app_title} config from backup"""
        try:
            backup_path = os.path.join(backup_dir, f"{app_name}-config.backup")
            if os.path.exists(backup_path):
                shutil.copy2(backup_path, self.config_path)
                self._reload_{app_name}()
                return True
            return False
        except Exception as e:
            print(f"Failed to restore {app_title} config: {{e}}")
            return False
    
    def _reload_{app_name}(self):
        """Reload {app_title} configuration"""
        try:
            # Add custom reload logic here
            # Examples:
            # subprocess.run(["killall", "-SIGUSR1", "{executable_name}"], capture_output=True, check=False)
            # subprocess.run(["{executable_name}ctl", "reload"], capture_output=True, check=False)
            pass
        except Exception:
            pass
'''

TEMPLATE_FILE_TEMPLATE = '''/* {app_title} Theme Template
 * Generated by Theme Manager Plugin System
 * 
 * Available color variables:
 * {{{{background}}}} - Main background color
 * {{{{foreground}}}} - Main text color
 * {{{{color0}}}} to {{{{color15}}}} - Palette colors
 * {{{{cursor}}}} - Cursor color
 */

/* Add your {app_title} theming CSS/config here */
body {{
    background-color: {{{{background}}}};
    color: {{{{foreground}}}};
}}

/* Example color usage */
.accent {{
    background-color: {{{{color4}}}};
    color: {{{{color15}}}};
}}
'''

def create_plugin(app_name: str, app_title: str, app_description: str, 
                 config_path: str, executable_name: str = None):
    """Create a new plugin"""
    
    if not executable_name:
        executable_name = app_name
    
    class_name = app_name.capitalize()
    
    # Create plugin file
    plugin_dir = Path(__file__).parent / "plugins"
    plugin_dir.mkdir(exist_ok=True)
    
    plugin_file = plugin_dir / f"{app_name}_plugin.py"
    
    plugin_content = PLUGIN_TEMPLATE.format(
        app_name=app_name,
        app_title=app_title,
        app_description=app_description,
        class_name=class_name,
        config_path=config_path,
        executable_name=executable_name
    )
    
    with open(plugin_file, 'w') as f:
        f.write(plugin_content)
    
    # Create template file
    template_dir = Path(__file__).parent / "config" / "templates"
    template_dir.mkdir(parents=True, exist_ok=True)
    
    template_file = template_dir / f"{app_name}.template"
    
    template_content = TEMPLATE_FILE_TEMPLATE.format(
        app_title=app_title
    )
    
    with open(template_file, 'w') as f:
        f.write(template_content)
    
    print(f"‚úÖ Created plugin: {plugin_file}")
    print(f"‚úÖ Created template: {template_file}")
    print(f"\\nüìù Next steps:")
    print(f"1. Edit {template_file} with your {app_title} theming")
    print(f"2. Customize the reload logic in {plugin_file}")
    print(f"3. Test the plugin in Theme Manager")

def main():
    if len(sys.argv) < 5:
        print("Usage: python create_plugin.py <app_name> <app_title> <description> <config_path> [executable_name]")
        print("\\nExample:")
        print("python create_plugin.py alacritty 'Alacritty Terminal' 'Fast terminal emulator' '~/.config/alacritty/alacritty.yml'")
        sys.exit(1)
    
    app_name = sys.argv[1]
    app_title = sys.argv[2]
    description = sys.argv[3]
    config_path = sys.argv[4]
    executable_name = sys.argv[5] if len(sys.argv) > 5 else None
    
    create_plugin(app_name, app_title, description, config_path, executable_name)

if __name__ == "__main__":
    main()
